---
description: "USE WHEN developing n8n workflows, configuring production environment, or implementing strangematic.com automation hub"
globs: ["packages/**/*", "**/*.ts", "**/*.js", "**/config*", "**/env*", "**/setup*"]
alwaysApply: true
---

# Source Code Development Rules cho strangematic.com Production Hub

## Development Approach - Production-First Flexibility
- **Production Domain**: Lu√¥n s·ª≠ d·ª•ng strangematic.com infrastructure cho development v√† production
- **Source Code Deployment**: n8n source code thay v√¨ Docker containers (maximum customization)
- **Windows Headless Environment**: Native Windows environment cho Figma plugin ecosystem
- **Design-Oriented Customization**: Full customization c·ªßa n8n core functionality cho automation needs
- **Real-time Production Development**: Direct development tr√™n production environment v·ªõi proper safeguards

## Production Setup Commands - strangematic.com Hub
```bash
# Clone n8n source code
git clone https://github.com/n8n-io/n8n.git
cd n8n

# Install dependencies
npm install

# Build project (production ready)
npm run build

# Production mode v·ªõi strangematic configuration
npm start
```

## Environment Configuration - strangematic.com Production

```yaml
Primary Environment: .env.production
Secondary Environment: .env.local (development overrides)

Domain Configuration:
  DOMAIN_NAME: strangematic.com
  N8N_EDITOR_BASE_URL: https://app.strangematic.com
  WEBHOOK_URL: https://api.strangematic.com
  N8N_HOST: app.strangematic.com
  N8N_PROTOCOL: https
  N8N_PORT: 5678

Database Configuration:
  DB_TYPE: postgresdb
  DB_POSTGRESDB_HOST: localhost
  DB_POSTGRESDB_PORT: 5432
  DB_POSTGRESDB_DATABASE: strangematic_n8n
  DB_POSTGRESDB_USER: strangematic_user
  DB_POSTGRESDB_PASSWORD: [secure_password]

# üÜï YEScale Hybrid API Configuration - Cost Optimization
API_OPTIMIZATION_MODE: hybrid

YEScale Configuration (Primary - 40-80% savings):
  YESCALE_BASE_URL: https://yescale.bogia.app
  YESCALE_API_KEY: [your_yescale_access_key]
  YESCALE_ENABLE_FALLBACK: true
  YESCALE_QUOTA_THRESHOLD: 1000000

Fallback APIs (Premium features):
  OPENAI_API_KEY: [fallback_openai_key]
  CLAUDE_API_KEY: [fallback_claude_key]
  GOOGLE_AI_KEY: [fallback_google_key]

Cost Control Settings:
  MAX_DAILY_COST_USD: 50
  MAX_WORKFLOW_COST_USD: 5
  COST_ALERT_WEBHOOK: https://api.strangematic.com/webhook/cost-alert

Security Configuration:
  N8N_SECURE_COOKIE: true
  N8N_JWT_SECRET: [secure_jwt_secret]
  N8N_ENCRYPTION_KEY: [secure_encryption_key]

Performance Configuration:
  N8N_EXECUTIONS_TIMEOUT: 3600
  N8N_EXECUTIONS_TIMEOUT_MAX: 7200
  N8N_EXECUTIONS_DATA_SAVE_ON_ERROR: all
  N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
```

## Windows Service Configuration - Production Ready
```powershell
# PM2 Windows Service Setup
npm install -g pm2-windows-service
pm2-service-install

# Ecosystem Configuration (ecosystem.config.js)
module.exports = {
  apps: [{
    name: 'strangematic-hub',
    script: './packages/cli/bin/n8n',
    cwd: 'C:/n8n',
    env: {
      NODE_ENV: 'production',
      N8N_EDITOR_BASE_URL: 'https://app.strangematic.com',
      WEBHOOK_URL: 'https://api.strangematic.com'
    },
    log_file: 'C:/n8n-logs/strangematic.log',
    error_file: 'C:/n8n-logs/strangematic-error.log',
    out_file: 'C:/n8n-logs/strangematic-out.log',
    max_memory_restart: '2G',
    watch: false,
    autorestart: true
  }]
};

# Start production service
pm2 start ecosystem.config.js
pm2 startup
pm2 save
```

## Customization Areas cho strangematic.com Automation Hub
```yaml
Custom Node Development:
  - Design automation nodes (Figma integration)
  - Content generation nodes (OpenAI + templates)
  - Project management nodes (status tracking)
  - Social media automation nodes

Core Workflow Optimization:
  - Webhook endpoint customization
  - Error handling v√† retry logic
  - Performance monitoring integration
  - Resource usage optimization

Database Customization:
  - Custom tables cho project tracking
  - Workflow metrics v√† analytics
  - User activity logging
  - Performance data storage

API Modifications:
  - Custom authentication endpoints
  - Webhook validation logic
  - Rate limiting implementation
  - Health check endpoints
```

## Development Workflow - Production Environment
```yaml
Development Process:
  1. Feature Development:
     - Create feature branch
     - Develop v·ªõi source code
     - Test on local development server
     - Deploy to production environment

  2. Testing Strategy:
     - Unit tests cho custom nodes
     - Integration tests cho workflows
     - End-to-end tests via webhooks
     - Performance testing v·ªõi real data

  3. Deployment Process:
     - Git-based deployment
     - PM2 service restart
     - Health check validation
     - Rollback procedures ready
```

## Benefits c·ªßa Source Code Approach cho strangematic.com
```yaml
Development Advantages:
  - Full source access cho unlimited customization
  - Real-time debugging capabilities trong production
  - Custom node development cho specific workflows
  - Performance optimization at core level
  - Advanced integration v·ªõi Windows design tools

Production Benefits:
  - Maximum performance v·ªõi native compilation
  - Custom security implementations
  - Advanced monitoring v√† analytics
  - Seamless integration v·ªõi Cloudflare Tunnel
  - Professional-grade reliability

Design Tool Integration:
  - Native Figma plugin ecosystem access
  - Windows-only design tool integration
  - Advanced file system integration
  - Custom automation workflows
  - Performance-optimized asset handling
```

## Custom Development Guidelines - strangematic.com Hub
```yaml
Code Organization:
  - Custom nodes: packages/nodes-strangematic/
  - Core modifications: packages/core/src/
  - Database schemas: packages/cli/src/databases/
  - API endpoints: packages/cli/src/

Development Standards:
  - TypeScript strict mode enabled
  - ESLint configuration enforced
  - Performance monitoring integrated
  - Error handling comprehensive
  - Documentation requirements

Testing Requirements:
  - Unit test coverage >80%
  - Integration tests cho all custom workflows
  - Performance benchmarks established
  - Security validation automated
  - End-to-end testing via webhooks
```

## Production Monitoring - Development Integration
```yaml
Development Metrics:
  - Code deployment frequency
  - Feature development cycle time
  - Bug discovery v√† fix time
  - Performance regression detection

Production Metrics:
  - Workflow execution success rate
  - API response times
  - Resource usage patterns
  - Error frequency v√† types

Integration Monitoring:
  - Figma API response times
  - OpenAI API rate limiting
  - Database performance metrics
  - Cloudflare Tunnel health
```

## Security Development Practices
```yaml
Code Security:
  - Input validation comprehensive
  - SQL injection prevention
  - XSS protection implemented
  - API key management secure

Environment Security:
  - Environment variables encrypted
  - Database connections secured
  - File system permissions restricted
  - Network access controlled

Production Security:
  - Regular security updates
  - Vulnerability scanning automated
  - Access control implemented
  - Audit logging comprehensive
```

## Performance Development Guidelines
```yaml
Resource Optimization:
  - Memory usage monitoring
  - CPU utilization tracking
  - Database query optimization
  - Network bandwidth management

Code Optimization:
  - Async/await patterns enforced
  - Error handling optimized
  - Caching strategies implemented
  - Batch processing utilized

System Optimization:
  - Windows service configuration
  - PostgreSQL performance tuning
  - File system optimization
  - Network stack optimization
```

## Development Environment Setup - strangematic.com
```yaml
Required Tools:
  - Visual Studio Code with extensions
  - Node.js LTS version
  - PostgreSQL 14+
  - Git for version control
  - PM2 for process management
  - Cloudflared for tunnel management

Development Workflow:
  - Feature branches for all changes
  - Code review required for production
  - Automated testing on commit
  - Staging environment testing
  - Production deployment v·ªõi approval

Quality Assurance:
  - TypeScript compilation checking
  - ESLint code quality enforcement
  - Jest unit testing framework
  - Cypress end-to-end testing
  - Performance monitoring integration
```

---

*Source code development rules optimized cho strangematic.com automation hub v·ªõi enterprise-grade reliability v√† professional customization capabilities*
