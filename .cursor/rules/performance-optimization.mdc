---
description: "USE WHEN optimizing performance, analyzing system resources, or implementing efficiency improvements on Dell OptiPlex 3060"
globs: ["**/*.ts", "**/*.js", "packages/**/*", "scripts/**/*", "**/performance*/**/*"]
alwaysApply: true
---

# Performance-First Development Rules với Conservative 80/20 Approach

## Core Performance Principles cho Product Designer
- **Conservative CPU Optimization**: Leverage 6 cores/6 threads của i5-8500T @2.1GHz một cách thông minh - avoid overloading
- **Efficient Memory Management**: Sử dụng 16GB RAM efficiently cho moderate datasets - monitor usage carefully
- **Storage Optimization**: Sử dụng limited 636GB storage effectively - regular cleanup essential
- **Batch Processing**: Process data theo smaller batches của 50+ items (adjust cho limited resources)
- **Async Operations**: Sử dụng async/await cho I/O operations - critical với slower CPU
- **Smart Caching**: Implement lightweight caching cho expensive operations - memory-conscious

## Resource Allocation - Conservative 80/20 Focused
- **CPU allocation**: Allocate max 4 cores cho n8n processes (2 cores reserved cho OS stability)
- **Memory management**: Reserve 2-4GB RAM cho n8n workflows (careful monitoring essential)
- **Storage strategy**: Primary C: drive cho data, E: drive cho backups (manage space carefully)
- **Performance monitoring**: Critical - monitor all resources với limited hardware capacity

## Anti-Patterns to Avoid - Critical cho Limited Resources
- ❌ **CPU-intensive operations** trong main thread (i5-8500T có limited performance)
- ❌ **Memory leaks** từ accumulated data (critical với 16GB RAM limit)
- ❌ **Large batch processing** without monitoring (can overwhelm system)
- ❌ **Concurrent heavy operations** (limited cores và threads)
- ❌ **Ignoring storage limits** (only 636GB total available)
- ❌ **Running too many parallel workflows** (resource contention)

## Performance Metrics to Track - Essential cho Limited Hardware
- **CPU usage per core**: Monitor để prevent overload
- **Memory usage patterns**: Critical tracking để prevent system slowdown
- **Storage space usage**: Essential monitoring do limited capacity
- **Response latency**: Monitor performance degradation
- **System temperature**: T-series CPU thermal monitoring
- **Error rates**: Increase khi system under stress

## Smart Performance Strategies cho Product Designer
- **Progressive enhancement**: Start very simple, optimize cautiously
- **User-perceived performance**: Focus vào responsive UI với limited resources
- **Background processing**: Minimize background tasks để preserve resources
- **Lightweight caching**: Use memory-efficient caching strategies
- **Lazy loading**: Essential với limited system resources

## MCP Performance Considerations
- **Service efficiency**: Design lightweight MCP services
- **Resource sharing**: Careful resource allocation across MCP services
- **Background optimization**: MCP services must run với minimal system impact

## Quick Wins - 20% Effort, 80% Impact cho Limited Hardware
1. **Memory monitoring**: Implement memory usage alerts
2. **Connection pooling**: Reuse connections để save resources
3. **Batch size optimization**: Find optimal batch sizes cho system capacity
4. **Storage cleanup**: Automated cleanup cho space management
5. **Resource throttling**: Implement throttling cho system protection
